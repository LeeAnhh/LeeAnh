From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LeeAnhh <summertwilighttimes@gmail.com>
Date: Mon, 30 Jan 2023 18:00:48 +0700
Subject: [PATCH] Cleaned Mojang's math classes


diff --git a/src/main/java/com/mojang/math/Matrix3f.java b/src/main/java/com/mojang/math/Matrix3f.java
deleted file mode 100644
index 7831d1832eb824c976c5b0e277b03bac1d5610e1..0000000000000000000000000000000000000000
--- a/src/main/java/com/mojang/math/Matrix3f.java
+++ /dev/null
@@ -1,174 +0,0 @@
-package com.mojang.math;
-
-public final class Matrix3f {
-    private static final float G = 3.0F + 2.0F * (float)Math.sqrt(2.0);
-    private static final float CS = (float)Math.cos(Math.PI / 8);
-    private static final float SS = (float)Math.sin(Math.PI / 8);
-    private static final float SQ2 = 1.0F / (float)Math.sqrt(2.0);
-    protected float m00;
-    protected float m01;
-    protected float m02;
-    protected float m10;
-    protected float m11;
-    protected float m12;
-    protected float m20;
-    protected float m21;
-    protected float m22;
-
-    public Matrix3f() {
-    }
-
-    public Matrix3f(Quaternion debug1) {
-        float f = debug1.i();
-        float f1 = debug1.j();
-        float f2 = debug1.k();
-        float f3 = debug1.r();
-        float f4 = 2.0F * f * f;
-        float f5 = 2.0F * f1 * f1;
-        float f6 = 2.0F * f2 * f2;
-        this.m00 = 1.0F - f5 - f6;
-        this.m11 = 1.0F - f6 - f4;
-        this.m22 = 1.0F - f4 - f5;
-        float f7 = f * f1;
-        float f8 = f1 * f2;
-        float f9 = f2 * f;
-        float f10 = f * f3;
-        float f11 = f1 * f3;
-        float f12 = f2 * f3;
-        this.m10 = 2.0F * (f7 + f12);
-        this.m01 = 2.0F * (f7 - f12);
-        this.m20 = 2.0F * (f9 - f11);
-        this.m02 = 2.0F * (f9 + f11);
-        this.m21 = 2.0F * (f8 + f10);
-        this.m12 = 2.0F * (f8 - f10);
-    }
-
-    public Matrix3f(Matrix4f debug1) {
-        this.m00 = debug1.m00;
-        this.m01 = debug1.m01;
-        this.m02 = debug1.m02;
-        this.m10 = debug1.m10;
-        this.m11 = debug1.m11;
-        this.m12 = debug1.m12;
-        this.m20 = debug1.m20;
-        this.m21 = debug1.m21;
-        this.m22 = debug1.m22;
-    }
-
-    public Matrix3f(Matrix3f debug1) {
-        this.m00 = debug1.m00;
-        this.m01 = debug1.m01;
-        this.m02 = debug1.m02;
-        this.m10 = debug1.m10;
-        this.m11 = debug1.m11;
-        this.m12 = debug1.m12;
-        this.m20 = debug1.m20;
-        this.m21 = debug1.m21;
-        this.m22 = debug1.m22;
-    }
-
-    @Override
-    public boolean equals(Object debug1) {
-        if (this == debug1) {
-            return true;
-        } else if (debug1 != null && this.getClass() == debug1.getClass()) {
-            Matrix3f matrix3f = (Matrix3f)debug1;
-            return Float.compare(matrix3f.m00, this.m00) == 0
-                && Float.compare(matrix3f.m01, this.m01) == 0
-                && Float.compare(matrix3f.m02, this.m02) == 0
-                && Float.compare(matrix3f.m10, this.m10) == 0
-                && Float.compare(matrix3f.m11, this.m11) == 0
-                && Float.compare(matrix3f.m12, this.m12) == 0
-                && Float.compare(matrix3f.m20, this.m20) == 0
-                && Float.compare(matrix3f.m21, this.m21) == 0
-                && Float.compare(matrix3f.m22, this.m22) == 0;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public int hashCode() {
-        int i = this.m00 != 0.0F ? Float.floatToIntBits(this.m00) : 0;
-        i = 31 * i + (this.m01 != 0.0F ? Float.floatToIntBits(this.m01) : 0);
-        i = 31 * i + (this.m02 != 0.0F ? Float.floatToIntBits(this.m02) : 0);
-        i = 31 * i + (this.m10 != 0.0F ? Float.floatToIntBits(this.m10) : 0);
-        i = 31 * i + (this.m11 != 0.0F ? Float.floatToIntBits(this.m11) : 0);
-        i = 31 * i + (this.m12 != 0.0F ? Float.floatToIntBits(this.m12) : 0);
-        i = 31 * i + (this.m20 != 0.0F ? Float.floatToIntBits(this.m20) : 0);
-        i = 31 * i + (this.m21 != 0.0F ? Float.floatToIntBits(this.m21) : 0);
-        return 31 * i + (this.m22 != 0.0F ? Float.floatToIntBits(this.m22) : 0);
-    }
-
-    @Override
-    public String toString() {
-        StringBuilder stringbuilder = new StringBuilder();
-        stringbuilder.append("Matrix3f:\n");
-        stringbuilder.append(this.m00);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m01);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m02);
-        stringbuilder.append("\n");
-        stringbuilder.append(this.m10);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m11);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m12);
-        stringbuilder.append("\n");
-        stringbuilder.append(this.m20);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m21);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m22);
-        stringbuilder.append("\n");
-        return stringbuilder.toString();
-    }
-
-    public void set(int debug1, int debug2, float debug3) {
-        if (debug1 == 0) {
-            if (debug2 == 0) {
-                this.m00 = debug3;
-            } else if (debug2 == 1) {
-                this.m01 = debug3;
-            } else {
-                this.m02 = debug3;
-            }
-        } else if (debug1 == 1) {
-            if (debug2 == 0) {
-                this.m10 = debug3;
-            } else if (debug2 == 1) {
-                this.m11 = debug3;
-            } else {
-                this.m12 = debug3;
-            }
-        } else if (debug2 == 0) {
-            this.m20 = debug3;
-        } else if (debug2 == 1) {
-            this.m21 = debug3;
-        } else {
-            this.m22 = debug3;
-        }
-    }
-
-    public void mul(Matrix3f debug1) {
-        float f = this.m00 * debug1.m00 + this.m01 * debug1.m10 + this.m02 * debug1.m20;
-        float f1 = this.m00 * debug1.m01 + this.m01 * debug1.m11 + this.m02 * debug1.m21;
-        float f2 = this.m00 * debug1.m02 + this.m01 * debug1.m12 + this.m02 * debug1.m22;
-        float f3 = this.m10 * debug1.m00 + this.m11 * debug1.m10 + this.m12 * debug1.m20;
-        float f4 = this.m10 * debug1.m01 + this.m11 * debug1.m11 + this.m12 * debug1.m21;
-        float f5 = this.m10 * debug1.m02 + this.m11 * debug1.m12 + this.m12 * debug1.m22;
-        float f6 = this.m20 * debug1.m00 + this.m21 * debug1.m10 + this.m22 * debug1.m20;
-        float f7 = this.m20 * debug1.m01 + this.m21 * debug1.m11 + this.m22 * debug1.m21;
-        float f8 = this.m20 * debug1.m02 + this.m21 * debug1.m12 + this.m22 * debug1.m22;
-        this.m00 = f;
-        this.m01 = f1;
-        this.m02 = f2;
-        this.m10 = f3;
-        this.m11 = f4;
-        this.m12 = f5;
-        this.m20 = f6;
-        this.m21 = f7;
-        this.m22 = f8;
-    }
-}
diff --git a/src/main/java/com/mojang/math/Matrix4f.java b/src/main/java/com/mojang/math/Matrix4f.java
deleted file mode 100644
index 81d8ce85e89d866f00c4b72311454637ae13fc06..0000000000000000000000000000000000000000
--- a/src/main/java/com/mojang/math/Matrix4f.java
+++ /dev/null
@@ -1,154 +0,0 @@
-package com.mojang.math;
-
-public final class Matrix4f {
-    protected float m00;
-    protected float m01;
-    protected float m02;
-    protected float m03;
-    protected float m10;
-    protected float m11;
-    protected float m12;
-    protected float m13;
-    protected float m20;
-    protected float m21;
-    protected float m22;
-    protected float m23;
-    protected float m30;
-    protected float m31;
-    protected float m32;
-    protected float m33;
-
-    public Matrix4f() {
-    }
-
-    public Matrix4f(Matrix4f debug1) {
-        this.m00 = debug1.m00;
-        this.m01 = debug1.m01;
-        this.m02 = debug1.m02;
-        this.m03 = debug1.m03;
-        this.m10 = debug1.m10;
-        this.m11 = debug1.m11;
-        this.m12 = debug1.m12;
-        this.m13 = debug1.m13;
-        this.m20 = debug1.m20;
-        this.m21 = debug1.m21;
-        this.m22 = debug1.m22;
-        this.m23 = debug1.m23;
-        this.m30 = debug1.m30;
-        this.m31 = debug1.m31;
-        this.m32 = debug1.m32;
-        this.m33 = debug1.m33;
-    }
-
-    public Matrix4f(Quaternion debug1) {
-        float f = debug1.i();
-        float f1 = debug1.j();
-        float f2 = debug1.k();
-        float f3 = debug1.r();
-        float f4 = 2.0F * f * f;
-        float f5 = 2.0F * f1 * f1;
-        float f6 = 2.0F * f2 * f2;
-        this.m00 = 1.0F - f5 - f6;
-        this.m11 = 1.0F - f6 - f4;
-        this.m22 = 1.0F - f4 - f5;
-        this.m33 = 1.0F;
-        float f7 = f * f1;
-        float f8 = f1 * f2;
-        float f9 = f2 * f;
-        float f10 = f * f3;
-        float f11 = f1 * f3;
-        float f12 = f2 * f3;
-        this.m10 = 2.0F * (f7 + f12);
-        this.m01 = 2.0F * (f7 - f12);
-        this.m20 = 2.0F * (f9 - f11);
-        this.m02 = 2.0F * (f9 + f11);
-        this.m21 = 2.0F * (f8 + f10);
-        this.m12 = 2.0F * (f8 - f10);
-    }
-
-    @Override
-    public boolean equals(Object debug1) {
-        if (this == debug1) {
-            return true;
-        } else if (debug1 != null && this.getClass() == debug1.getClass()) {
-            Matrix4f matrix4f = (Matrix4f)debug1;
-            return Float.compare(matrix4f.m00, this.m00) == 0
-                && Float.compare(matrix4f.m01, this.m01) == 0
-                && Float.compare(matrix4f.m02, this.m02) == 0
-                && Float.compare(matrix4f.m03, this.m03) == 0
-                && Float.compare(matrix4f.m10, this.m10) == 0
-                && Float.compare(matrix4f.m11, this.m11) == 0
-                && Float.compare(matrix4f.m12, this.m12) == 0
-                && Float.compare(matrix4f.m13, this.m13) == 0
-                && Float.compare(matrix4f.m20, this.m20) == 0
-                && Float.compare(matrix4f.m21, this.m21) == 0
-                && Float.compare(matrix4f.m22, this.m22) == 0
-                && Float.compare(matrix4f.m23, this.m23) == 0
-                && Float.compare(matrix4f.m30, this.m30) == 0
-                && Float.compare(matrix4f.m31, this.m31) == 0
-                && Float.compare(matrix4f.m32, this.m32) == 0
-                && Float.compare(matrix4f.m33, this.m33) == 0;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public int hashCode() {
-        int i = this.m00 != 0.0F ? Float.floatToIntBits(this.m00) : 0;
-        i = 31 * i + (this.m01 != 0.0F ? Float.floatToIntBits(this.m01) : 0);
-        i = 31 * i + (this.m02 != 0.0F ? Float.floatToIntBits(this.m02) : 0);
-        i = 31 * i + (this.m03 != 0.0F ? Float.floatToIntBits(this.m03) : 0);
-        i = 31 * i + (this.m10 != 0.0F ? Float.floatToIntBits(this.m10) : 0);
-        i = 31 * i + (this.m11 != 0.0F ? Float.floatToIntBits(this.m11) : 0);
-        i = 31 * i + (this.m12 != 0.0F ? Float.floatToIntBits(this.m12) : 0);
-        i = 31 * i + (this.m13 != 0.0F ? Float.floatToIntBits(this.m13) : 0);
-        i = 31 * i + (this.m20 != 0.0F ? Float.floatToIntBits(this.m20) : 0);
-        i = 31 * i + (this.m21 != 0.0F ? Float.floatToIntBits(this.m21) : 0);
-        i = 31 * i + (this.m22 != 0.0F ? Float.floatToIntBits(this.m22) : 0);
-        i = 31 * i + (this.m23 != 0.0F ? Float.floatToIntBits(this.m23) : 0);
-        i = 31 * i + (this.m30 != 0.0F ? Float.floatToIntBits(this.m30) : 0);
-        i = 31 * i + (this.m31 != 0.0F ? Float.floatToIntBits(this.m31) : 0);
-        i = 31 * i + (this.m32 != 0.0F ? Float.floatToIntBits(this.m32) : 0);
-        return 31 * i + (this.m33 != 0.0F ? Float.floatToIntBits(this.m33) : 0);
-    }
-
-    @Override
-    public String toString() {
-        StringBuilder stringbuilder = new StringBuilder();
-        stringbuilder.append("Matrix4f:\n");
-        stringbuilder.append(this.m00);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m01);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m02);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m03);
-        stringbuilder.append("\n");
-        stringbuilder.append(this.m10);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m11);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m12);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m13);
-        stringbuilder.append("\n");
-        stringbuilder.append(this.m20);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m21);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m22);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m23);
-        stringbuilder.append("\n");
-        stringbuilder.append(this.m30);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m31);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m32);
-        stringbuilder.append(" ");
-        stringbuilder.append(this.m33);
-        stringbuilder.append("\n");
-        return stringbuilder.toString();
-    }
-}
diff --git a/src/main/java/com/mojang/math/OctahedralGroup.java b/src/main/java/com/mojang/math/OctahedralGroup.java
index c64a8bf52f0d2b949db47793530acfb54a0170a6..9d43999ff234a32c59b4f9f0521a7778a1874f8f 100644
--- a/src/main/java/com/mojang/math/OctahedralGroup.java
+++ b/src/main/java/com/mojang/math/OctahedralGroup.java
@@ -1,121 +1,35 @@
 package com.mojang.math;
 
 import com.google.common.collect.Maps;
-import com.mojang.datafixers.util.Pair;
-import it.unimi.dsi.fastutil.booleans.BooleanArrayList;
-import it.unimi.dsi.fastutil.booleans.BooleanList;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.stream.Collectors;
-import javax.annotation.Nullable;
-import net.minecraft.Util;
 import net.minecraft.core.Direction;
 import net.minecraft.core.FrontAndTop;
 import net.minecraft.util.StringRepresentable;
 
+import javax.annotation.Nullable;
+import java.util.Map;
+
 public enum OctahedralGroup implements StringRepresentable {
     IDENTITY("identity", SymmetricGroup3.P123, false, false, false),
-    ROT_180_FACE_XY("rot_180_face_xy", SymmetricGroup3.P123, true, true, false),
     ROT_180_FACE_XZ("rot_180_face_xz", SymmetricGroup3.P123, true, false, true),
-    ROT_180_FACE_YZ("rot_180_face_yz", SymmetricGroup3.P123, false, true, true),
-    ROT_120_NNN("rot_120_nnn", SymmetricGroup3.P231, false, false, false),
-    ROT_120_NNP("rot_120_nnp", SymmetricGroup3.P312, true, false, true),
-    ROT_120_NPN("rot_120_npn", SymmetricGroup3.P312, false, true, true),
-    ROT_120_NPP("rot_120_npp", SymmetricGroup3.P231, true, false, true),
-    ROT_120_PNN("rot_120_pnn", SymmetricGroup3.P312, true, true, false),
-    ROT_120_PNP("rot_120_pnp", SymmetricGroup3.P231, true, true, false),
-    ROT_120_PPN("rot_120_ppn", SymmetricGroup3.P231, false, true, true),
-    ROT_120_PPP("rot_120_ppp", SymmetricGroup3.P312, false, false, false),
-    ROT_180_EDGE_XY_NEG("rot_180_edge_xy_neg", SymmetricGroup3.P213, true, true, true),
-    ROT_180_EDGE_XY_POS("rot_180_edge_xy_pos", SymmetricGroup3.P213, false, false, true),
-    ROT_180_EDGE_XZ_NEG("rot_180_edge_xz_neg", SymmetricGroup3.P321, true, true, true),
-    ROT_180_EDGE_XZ_POS("rot_180_edge_xz_pos", SymmetricGroup3.P321, false, true, false),
-    ROT_180_EDGE_YZ_NEG("rot_180_edge_yz_neg", SymmetricGroup3.P132, true, true, true),
-    ROT_180_EDGE_YZ_POS("rot_180_edge_yz_pos", SymmetricGroup3.P132, true, false, false),
-    ROT_90_X_NEG("rot_90_x_neg", SymmetricGroup3.P132, false, false, true),
-    ROT_90_X_POS("rot_90_x_pos", SymmetricGroup3.P132, false, true, false),
     ROT_90_Y_NEG("rot_90_y_neg", SymmetricGroup3.P321, true, false, false),
     ROT_90_Y_POS("rot_90_y_pos", SymmetricGroup3.P321, false, false, true),
-    ROT_90_Z_NEG("rot_90_z_neg", SymmetricGroup3.P213, false, true, false),
-    ROT_90_Z_POS("rot_90_z_pos", SymmetricGroup3.P213, true, false, false),
-    INVERSION("inversion", SymmetricGroup3.P123, true, true, true),
     INVERT_X("invert_x", SymmetricGroup3.P123, true, false, false),
-    INVERT_Y("invert_y", SymmetricGroup3.P123, false, true, false),
-    INVERT_Z("invert_z", SymmetricGroup3.P123, false, false, true),
-    ROT_60_REF_NNN("rot_60_ref_nnn", SymmetricGroup3.P312, true, true, true),
-    ROT_60_REF_NNP("rot_60_ref_nnp", SymmetricGroup3.P231, true, false, false),
-    ROT_60_REF_NPN("rot_60_ref_npn", SymmetricGroup3.P231, false, false, true),
-    ROT_60_REF_NPP("rot_60_ref_npp", SymmetricGroup3.P312, false, false, true),
-    ROT_60_REF_PNN("rot_60_ref_pnn", SymmetricGroup3.P231, false, true, false),
-    ROT_60_REF_PNP("rot_60_ref_pnp", SymmetricGroup3.P312, true, false, false),
-    ROT_60_REF_PPN("rot_60_ref_ppn", SymmetricGroup3.P312, false, true, false),
-    ROT_60_REF_PPP("rot_60_ref_ppp", SymmetricGroup3.P231, true, true, true),
-    SWAP_XY("swap_xy", SymmetricGroup3.P213, false, false, false),
-    SWAP_YZ("swap_yz", SymmetricGroup3.P132, false, false, false),
-    SWAP_XZ("swap_xz", SymmetricGroup3.P321, false, false, false),
-    SWAP_NEG_XY("swap_neg_xy", SymmetricGroup3.P213, true, true, false),
-    SWAP_NEG_YZ("swap_neg_yz", SymmetricGroup3.P132, false, true, true),
-    SWAP_NEG_XZ("swap_neg_xz", SymmetricGroup3.P321, true, false, true),
-    ROT_90_REF_X_NEG("rot_90_ref_x_neg", SymmetricGroup3.P132, true, false, true),
-    ROT_90_REF_X_POS("rot_90_ref_x_pos", SymmetricGroup3.P132, true, true, false),
-    ROT_90_REF_Y_NEG("rot_90_ref_y_neg", SymmetricGroup3.P321, true, true, false),
-    ROT_90_REF_Y_POS("rot_90_ref_y_pos", SymmetricGroup3.P321, false, true, true),
-    ROT_90_REF_Z_NEG("rot_90_ref_z_neg", SymmetricGroup3.P213, false, true, true),
-    ROT_90_REF_Z_POS("rot_90_ref_z_pos", SymmetricGroup3.P213, true, false, true);
+    INVERT_Z("invert_z", SymmetricGroup3.P123, false, false, true);
 
-    private final Matrix3f transformation;
     private final String name;
-    @Nullable
-    private Map<Direction, Direction> rotatedDirections;
     private final boolean invertX;
     private final boolean invertY;
     private final boolean invertZ;
     private final SymmetricGroup3 permutation;
-    private static final OctahedralGroup[][] cayleyTable = Util.make(
-        new OctahedralGroup[values().length][values().length],
-        debug0 -> {
-            Map<Pair<SymmetricGroup3, BooleanList>, OctahedralGroup> map = Arrays.stream(values())
-                .collect(Collectors.toMap(debug0x -> Pair.of(debug0x.permutation, debug0x.packInversions()), debug0x -> debug0x));
-    
-            for(OctahedralGroup octahedralgroup : values()) {
-                for(OctahedralGroup octahedralgroup1 : values()) {
-                    BooleanList booleanlist = octahedralgroup.packInversions();
-                    BooleanList booleanlist1 = octahedralgroup1.packInversions();
-                    SymmetricGroup3 symmetricgroup3 = octahedralgroup1.permutation.compose(octahedralgroup.permutation);
-                    BooleanArrayList booleanarraylist = new BooleanArrayList(3);
-    
-                    for(int i = 0; i < 3; ++i) {
-                        booleanarraylist.add(booleanlist.getBoolean(i) ^ booleanlist1.getBoolean(octahedralgroup.permutation.permutation(i)));
-                    }
-    
-                    debug0[octahedralgroup.ordinal()][octahedralgroup1.ordinal()] = map.get(Pair.of(symmetricgroup3, booleanarraylist));
-                }
-            }
-        }
-    );
-    private static final OctahedralGroup[] inverseTable = Arrays.stream(values())
-        .map(debug0 -> Arrays.stream(values()).filter(debug1 -> debug0.compose(debug1) == IDENTITY).findAny().get())
-        .toArray(debug0 -> new OctahedralGroup[debug0]);
-
-    private OctahedralGroup(String debug3, SymmetricGroup3 debug4, boolean debug5, boolean debug6, boolean debug7) {
-        this.name = debug3;
-        this.invertX = debug5;
-        this.invertY = debug6;
-        this.invertZ = debug7;
-        this.permutation = debug4;
-        this.transformation = new Matrix3f();
-        this.transformation.m00 = debug5 ? -1.0F : 1.0F;
-        this.transformation.m11 = debug6 ? -1.0F : 1.0F;
-        this.transformation.m22 = debug7 ? -1.0F : 1.0F;
-        this.transformation.mul(debug4.transformation());
-    }
-
-    private BooleanList packInversions() {
-        return new BooleanArrayList(new boolean[]{this.invertX, this.invertY, this.invertZ});
-    }
+    @Nullable
+    private Map<Direction, Direction> rotatedDirections;
 
-    public OctahedralGroup compose(OctahedralGroup debug1) {
-        return cayleyTable[this.ordinal()][debug1.ordinal()];
+    OctahedralGroup(final String name, final SymmetricGroup3 permutation, final boolean invertX, final boolean invertY, final boolean invertZ) {
+        this.name = name;
+        this.invertX = invertX;
+        this.invertY = invertY;
+        this.invertZ = invertZ;
+        this.permutation = permutation;
     }
 
     @Override
@@ -128,38 +42,35 @@ public enum OctahedralGroup implements StringRepresentable {
         return this.name;
     }
 
-    public Direction rotate(Direction debug1) {
+    public Direction rotate(final Direction originDirection) {
         if (this.rotatedDirections == null) {
             this.rotatedDirections = Maps.newEnumMap(Direction.class);
 
-            for(Direction direction : Direction.values()) {
-                Direction.Axis direction$axis = direction.getAxis();
-                Direction.AxisDirection direction$axisdirection = direction.getAxisDirection();
-                Direction.Axis direction$axis1 = Direction.Axis.values()[this.permutation.permutation(direction$axis.ordinal())];
-                Direction.AxisDirection direction$axisdirection1 = this.inverts(direction$axis1)
-                    ? direction$axisdirection.opposite()
-                    : direction$axisdirection;
-                Direction direction1 = Direction.fromAxisAndDirection(direction$axis1, direction$axisdirection1);
-                this.rotatedDirections.put(direction, direction1);
+            for (final Direction direction : Direction.values()) {
+
+                final Direction.Axis axis = direction.getAxis();
+                final Direction.AxisDirection axisDirection = direction.getAxisDirection();
+
+                final Direction.Axis oppoAxis = Direction.Axis.values()[this.permutation.permutation(axis.ordinal())];
+                final Direction.AxisDirection oppoAxisDirection = this.inverts(oppoAxis) ? axisDirection.opposite() : axisDirection;
+
+                final Direction rotated = Direction.fromAxisAndDirection(oppoAxis, oppoAxisDirection);
+                this.rotatedDirections.put(direction, rotated);
             }
         }
 
-        return this.rotatedDirections.get(debug1);
+        return this.rotatedDirections.get(originDirection);
     }
 
-    public boolean inverts(Direction.Axis debug1) {
-        switch(debug1) {
-            case X:
-                return this.invertX;
-            case Y:
-                return this.invertY;
-            case Z:
-            default:
-                return this.invertZ;
-        }
+    public boolean inverts(final Direction.Axis axis) {
+        return switch (axis) {
+            case X -> this.invertX;
+            case Y -> this.invertY;
+            default -> this.invertZ;
+        };
     }
 
-    public FrontAndTop rotate(FrontAndTop debug1) {
-        return FrontAndTop.fromFrontAndTop(this.rotate(debug1.front()), this.rotate(debug1.top()));
+    public FrontAndTop rotate(final FrontAndTop frontAndTop) {
+        return FrontAndTop.fromFrontAndTop(this.rotate(frontAndTop.front()), this.rotate(frontAndTop.top()));
     }
 }
diff --git a/src/main/java/com/mojang/math/Quaternion.java b/src/main/java/com/mojang/math/Quaternion.java
index ebd54916399132431db8b0d7ef83556d7f317591..8031c43bf3e07f13709c082298abec5ed82786e8 100644
--- a/src/main/java/com/mojang/math/Quaternion.java
+++ b/src/main/java/com/mojang/math/Quaternion.java
@@ -1,56 +1,54 @@
 package com.mojang.math;
 
 public final class Quaternion {
-    public static final Quaternion ONE = new Quaternion(0.0F, 0.0F, 0.0F, 1.0F);
     private float i;
     private float j;
     private float k;
     private float r;
 
-    public Quaternion(float debug1, float debug2, float debug3, float debug4) {
+    public Quaternion(final float debug1, final float debug2, final float debug3, final float debug4) {
         this.i = debug1;
         this.j = debug2;
         this.k = debug3;
         this.r = debug4;
     }
 
-    public Quaternion(Vector3f debug1, float debug2, boolean debug3) {
-        if (debug3) {
-            debug2 *= (float) (Math.PI / 180.0);
-        }
+    public Quaternion(final Vector3f vector3f, float n, final boolean isArc) {
+        if (isArc) n *= (float) (Math.PI / 180.0);
+
+        float f = sin(n / 2.0F);
+        this.i = vector3f.x() * f;
+        this.j = vector3f.y() * f;
+        this.k = vector3f.z() * f;
+        this.r = cos(n / 2.0F);
+    }
+
+    public Quaternion(final Quaternion quaternion) {
+        this.i = quaternion.i;
+        this.j = quaternion.j;
+        this.k = quaternion.k;
+        this.r = quaternion.r;
+    }
 
-        float f = sin(debug2 / 2.0F);
-        this.i = debug1.x() * f;
-        this.j = debug1.y() * f;
-        this.k = debug1.z() * f;
-        this.r = cos(debug2 / 2.0F);
+    private static float cos(final float n) {
+        return (float) Math.cos(n);
     }
 
-    public Quaternion(Quaternion debug1) {
-        this.i = debug1.i;
-        this.j = debug1.j;
-        this.k = debug1.k;
-        this.r = debug1.r;
+    private static float sin(final float n) {
+        return (float) Math.sin(n);
     }
 
     @Override
-    public boolean equals(Object debug1) {
-        if (this == debug1) {
-            return true;
-        } else if (debug1 != null && this.getClass() == debug1.getClass()) {
-            Quaternion quaternion = (Quaternion)debug1;
-            if (Float.compare(quaternion.i, this.i) != 0) {
-                return false;
-            } else if (Float.compare(quaternion.j, this.j) != 0) {
-                return false;
-            } else if (Float.compare(quaternion.k, this.k) != 0) {
-                return false;
-            } else {
-                return Float.compare(quaternion.r, this.r) == 0;
-            }
-        } else {
-            return false;
+    public boolean equals(final Object obj) {
+        if (this == obj) return true;
+        if (obj instanceof Quaternion quaternion) {
+            return Float.compare(quaternion.i, this.i) != 0
+                    && Float.compare(quaternion.j, this.j) != 0
+                    && Float.compare(quaternion.k, this.k) != 0
+                    && Float.compare(quaternion.r, this.r) != 0;
+
         }
+        return false;
     }
 
     @Override
@@ -63,12 +61,10 @@ public final class Quaternion {
 
     @Override
     public String toString() {
-        StringBuilder stringbuilder = new StringBuilder();
-        stringbuilder.append("Quaternion[").append(this.r()).append(" + ");
-        stringbuilder.append(this.i()).append("i + ");
-        stringbuilder.append(this.j()).append("j + ");
-        stringbuilder.append(this.k()).append("k]");
-        return stringbuilder.toString();
+        return "Quaternion[" + this.r() + " + " +
+                this.i() + "i + " +
+                this.j() + "j + " +
+                this.k() + "k]";
     }
 
     public float i() {
@@ -87,15 +83,15 @@ public final class Quaternion {
         return this.r;
     }
 
-    public void mul(Quaternion debug1) {
+    public void mul(final Quaternion quaternion) {
         float f = this.i();
         float f1 = this.j();
         float f2 = this.k();
         float f3 = this.r();
-        float f4 = debug1.i();
-        float f5 = debug1.j();
-        float f6 = debug1.k();
-        float f7 = debug1.r();
+        float f4 = quaternion.i();
+        float f5 = quaternion.j();
+        float f6 = quaternion.k();
+        float f7 = quaternion.r();
         this.i = f3 * f4 + f * f7 + f1 * f6 - f2 * f5;
         this.j = f3 * f5 - f * f6 + f1 * f7 + f2 * f4;
         this.k = f3 * f6 + f * f5 - f1 * f4 + f2 * f7;
@@ -107,12 +103,4 @@ public final class Quaternion {
         this.j = -this.j;
         this.k = -this.k;
     }
-
-    private static float cos(float debug0) {
-        return (float)Math.cos((double)debug0);
-    }
-
-    private static float sin(float debug0) {
-        return (float)Math.sin((double)debug0);
-    }
 }
diff --git a/src/main/java/com/mojang/math/SymmetricGroup3.java b/src/main/java/com/mojang/math/SymmetricGroup3.java
index 77d0561cb4cae5d84aaa6ec4d8983a313c2bf2c6..a3ca5d1bf75e7bd36b9498929a89fd7f6333947d 100644
--- a/src/main/java/com/mojang/math/SymmetricGroup3.java
+++ b/src/main/java/com/mojang/math/SymmetricGroup3.java
@@ -1,50 +1,17 @@
 package com.mojang.math;
 
-import java.util.Arrays;
-import net.minecraft.Util;
-
 public enum SymmetricGroup3 {
     P123(0, 1, 2),
-    P213(1, 0, 2),
-    P132(0, 2, 1),
-    P231(1, 2, 0),
-    P312(2, 0, 1),
     P321(2, 1, 0);
 
     private final int[] permutation;
-    private final Matrix3f transformation;
-    private static final SymmetricGroup3[][] cayleyTable = Util.make(new SymmetricGroup3[values().length][values().length], debug0 -> {
-        for(SymmetricGroup3 symmetricgroup3 : values()) {
-            for(SymmetricGroup3 symmetricgroup31 : values()) {
-                int[] aint = new int[3];
-
-                for(int i = 0; i < 3; ++i) {
-                    aint[i] = symmetricgroup3.permutation[symmetricgroup31.permutation[i]];
-                }
-
-                SymmetricGroup3 symmetricgroup32 = Arrays.stream(values()).filter(debug1 -> Arrays.equals(debug1.permutation, aint)).findFirst().get();
-                debug0[symmetricgroup3.ordinal()][symmetricgroup31.ordinal()] = symmetricgroup32;
-            }
-        }
-    });
 
-    private SymmetricGroup3(int debug3, int debug4, int debug5) {
-        this.permutation = new int[]{debug3, debug4, debug5};
-        this.transformation = new Matrix3f();
-        this.transformation.set(0, this.permutation(0), 1.0F);
-        this.transformation.set(1, this.permutation(1), 1.0F);
-        this.transformation.set(2, this.permutation(2), 1.0F);
+    SymmetricGroup3(final int n1, final int n2, final int n3) {
+        this.permutation = new int[]{n1, n2, n3};
     }
 
-    public SymmetricGroup3 compose(SymmetricGroup3 debug1) {
-        return cayleyTable[this.ordinal()][debug1.ordinal()];
+    public int permutation(int index) {
+        return this.permutation[index];
     }
 
-    public int permutation(int debug1) {
-        return this.permutation[debug1];
-    }
-
-    public Matrix3f transformation() {
-        return this.transformation;
-    }
 }
diff --git a/src/main/java/com/mojang/math/Vector3f.java b/src/main/java/com/mojang/math/Vector3f.java
index 53f76362573e1b00ac367834e30bf75f89b531c4..c7c82257673bd2630b62c55812f6330b85f0394f 100644
--- a/src/main/java/com/mojang/math/Vector3f.java
+++ b/src/main/java/com/mojang/math/Vector3f.java
@@ -3,45 +3,29 @@ package com.mojang.math;
 import net.minecraft.world.phys.Vec3;
 
 public final class Vector3f {
-    public static Vector3f XN = new Vector3f(-1.0F, 0.0F, 0.0F);
-    public static Vector3f XP = new Vector3f(1.0F, 0.0F, 0.0F);
-    public static Vector3f YN = new Vector3f(0.0F, -1.0F, 0.0F);
-    public static Vector3f YP = new Vector3f(0.0F, 1.0F, 0.0F);
-    public static Vector3f ZN = new Vector3f(0.0F, 0.0F, -1.0F);
-    public static Vector3f ZP = new Vector3f(0.0F, 0.0F, 1.0F);
     private float x;
     private float y;
     private float z;
 
-    public Vector3f() {
+    public Vector3f(final float x, final float y, final float z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
     }
 
-    public Vector3f(float debug1, float debug2, float debug3) {
-        this.x = debug1;
-        this.y = debug2;
-        this.z = debug3;
-    }
-
-    public Vector3f(Vec3 debug1) {
-        this((float)debug1.x, (float)debug1.y, (float)debug1.z);
+    public Vector3f(final Vec3 vec3) {
+        this((float) vec3.x, (float) vec3.y, (float) vec3.z);
     }
 
     @Override
-    public boolean equals(Object debug1) {
-        if (this == debug1) {
-            return true;
-        } else if (debug1 != null && this.getClass() == debug1.getClass()) {
-            Vector3f vector3f = (Vector3f)debug1;
-            if (Float.compare(vector3f.x, this.x) != 0) {
-                return false;
-            } else if (Float.compare(vector3f.y, this.y) != 0) {
-                return false;
-            } else {
-                return Float.compare(vector3f.z, this.z) == 0;
-            }
-        } else {
-            return false;
+    public boolean equals(final Object obj) {
+        if (this == obj) return true;
+        if (obj instanceof Vector3f vector3f) {
+            return Float.compare(vector3f.x, this.x) != 0
+                    && Float.compare(vector3f.y, this.y) != 0
+                    && Float.compare(vector3f.z, this.z) != 0;
         }
+        return false;
     }
 
     @Override
@@ -63,19 +47,20 @@ public final class Vector3f {
         return this.z;
     }
 
-    public void set(float debug1, float debug2, float debug3) {
-        this.x = debug1;
-        this.y = debug2;
-        this.z = debug3;
+    public void set(final float x, final float y, final float z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
     }
 
-    public void transform(Quaternion debug1) {
-        Quaternion quaternion = new Quaternion(debug1);
-        quaternion.mul(new Quaternion(this.x(), this.y(), this.z(), 0.0F));
-        Quaternion quaternion1 = new Quaternion(debug1);
-        quaternion1.conj();
-        quaternion.mul(quaternion1);
-        this.set(quaternion.i(), quaternion.j(), quaternion.k());
+    public void transform(final Quaternion origin) {
+        Quaternion transformed = new Quaternion(origin);
+        transformed.mul(new Quaternion(this.x(), this.y(), this.z(), 0.0F));
+        Quaternion copyOf = new Quaternion(origin);
+        copyOf.conj();
+        transformed.mul(copyOf);
+
+        this.set(transformed.i(), transformed.j(), transformed.k());
     }
 
     @Override
